编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：

    每行中的整数从左到右按升序排列。
    每行的第一个整数大于前一行的最后一个整数。
    
    示例 1:

    输入:
    matrix = [
      [1,   3,  5,  7],
      [10, 11, 16, 20],
      [23, 30, 34, 50]
    ]
    target = 3
    输出: true

     
    The first way:
        for i in matrix:
            if target in i:
                return True
        return False
    The second way:
    #二分法查找
    class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m = len(matrix) #矩阵的行
        if m == 0:
            return False
        n = len(matrix[0]) #矩阵的列
        front , end = 0 , m*n-1
        while front <= end:
            middle_index = (front + end) // 2  #中间元素的索引
            middle_num = matrix[middle_index // n][middle_index % n] #中间元素
            if middle_num == target:
                return True
            else:
                if middle_num > target:  #二分法
                    end = middle_index - 1
                else:
                    front = middle_index + 1
        return False
